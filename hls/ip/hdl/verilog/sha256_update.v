// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.1
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_in_data_address0,
        ctx_in_data_ce0,
        ctx_in_data_we0,
        ctx_in_data_d0,
        ctx_in_data_q0,
        ctx_in_data_address1,
        ctx_in_data_ce1,
        ctx_in_data_q1,
        ctx_bitlen_address0,
        ctx_bitlen_ce0,
        ctx_bitlen_we0,
        ctx_bitlen_d0,
        ctx_bitlen_q0,
        ctx_state_address0,
        ctx_state_ce0,
        ctx_state_we0,
        ctx_state_d0,
        ctx_state_q0,
        ctx_state_address1,
        ctx_state_ce1,
        ctx_state_we1,
        ctx_state_d1,
        ctx_state_q1,
        data_dout,
        data_empty_n,
        data_read,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] ctx_in_data_address0;
output   ctx_in_data_ce0;
output   ctx_in_data_we0;
output  [7:0] ctx_in_data_d0;
input  [7:0] ctx_in_data_q0;
output  [5:0] ctx_in_data_address1;
output   ctx_in_data_ce1;
input  [7:0] ctx_in_data_q1;
output  [0:0] ctx_bitlen_address0;
output   ctx_bitlen_ce0;
output   ctx_bitlen_we0;
output  [31:0] ctx_bitlen_d0;
input  [31:0] ctx_bitlen_q0;
output  [2:0] ctx_state_address0;
output   ctx_state_ce0;
output   ctx_state_we0;
output  [31:0] ctx_state_d0;
input  [31:0] ctx_state_q0;
output  [2:0] ctx_state_address1;
output   ctx_state_ce1;
output   ctx_state_we1;
output  [31:0] ctx_state_d1;
input  [31:0] ctx_state_q1;
input  [7:0] data_dout;
input   data_empty_n;
output   data_read;
output  [6:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] ctx_in_data_address0;
reg ctx_in_data_ce0;
reg ctx_in_data_we0;
reg ctx_in_data_ce1;
reg[0:0] ctx_bitlen_address0;
reg ctx_bitlen_ce0;
reg ctx_bitlen_we0;
reg[31:0] ctx_bitlen_d0;
reg ctx_state_ce0;
reg ctx_state_we0;
reg ctx_state_ce1;
reg ctx_state_we1;
reg data_read;
reg   [2:0] ap_CS_fsm = 3'b000;
wire   [0:0] ctx_bitlen_addr_gep_fu_52_p3;
reg   [0:0] ctx_bitlen_addr_reg_173;
wire   [0:0] ctx_bitlen_addr_2_gep_fu_60_p3;
reg   [0:0] ctx_bitlen_addr_2_reg_178;
wire   [6:0] i_4_fu_123_p2;
reg   [6:0] i_4_reg_186;
wire   [0:0] exitcond1_fu_117_p2;
reg    ap_sig_bdd_76;
reg   [31:0] ctx_bitlen_load_reg_195;
wire   [0:0] tmp_57_fu_151_p2;
reg   [0:0] tmp_57_reg_201;
wire    grp_sha256_transform_fu_99_ap_done;
reg   [31:0] ctx_bitlen_load_1_reg_205;
wire   [31:0] tmp_58_fu_156_p2;
reg   [31:0] tmp_58_reg_210;
wire   [31:0] tmp_59_fu_161_p2;
reg   [31:0] tmp_59_reg_215;
wire    grp_sha256_transform_fu_99_ap_start;
wire    grp_sha256_transform_fu_99_ap_idle;
wire    grp_sha256_transform_fu_99_ap_ready;
wire   [2:0] grp_sha256_transform_fu_99_ctx_transform_state_address0;
wire    grp_sha256_transform_fu_99_ctx_transform_state_ce0;
wire    grp_sha256_transform_fu_99_ctx_transform_state_we0;
wire   [31:0] grp_sha256_transform_fu_99_ctx_transform_state_d0;
wire   [31:0] grp_sha256_transform_fu_99_ctx_transform_state_q0;
wire   [2:0] grp_sha256_transform_fu_99_ctx_transform_state_address1;
wire    grp_sha256_transform_fu_99_ctx_transform_state_ce1;
wire    grp_sha256_transform_fu_99_ctx_transform_state_we1;
wire   [31:0] grp_sha256_transform_fu_99_ctx_transform_state_d1;
wire   [31:0] grp_sha256_transform_fu_99_ctx_transform_state_q1;
wire   [5:0] grp_sha256_transform_fu_99_data_transform_address0;
wire    grp_sha256_transform_fu_99_data_transform_ce0;
wire   [7:0] grp_sha256_transform_fu_99_data_transform_q0;
wire   [5:0] grp_sha256_transform_fu_99_data_transform_address1;
wire    grp_sha256_transform_fu_99_data_transform_ce1;
wire   [7:0] grp_sha256_transform_fu_99_data_transform_q1;
reg   [6:0] i_reg_85;
wire   [0:0] tmp_s_fu_140_p2;
reg    grp_sha256_transform_fu_99_ap_start_ap_start_reg = 1'b0;
wire   [31:0] ctx_datalen_1_cast_fu_129_p1;
reg   [6:0] ctx_datalen_1_fu_42;
wire   [6:0] ctx_datalen_assign_fu_134_p2;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_ST_st6_fsm_5 = 3'b101;
parameter    ap_ST_st7_fsm_6 = 3'b110;
parameter    ap_ST_st8_fsm_7 = 3'b111;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv7_40 = 7'b1000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_FFFFFDFF = 32'b11111111111111111111110111111111;
parameter    ap_const_lv32_200 = 32'b1000000000;
parameter    ap_true = 1'b1;


sha256_transform grp_sha256_transform_fu_99(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_sha256_transform_fu_99_ap_start ),
    .ap_done( grp_sha256_transform_fu_99_ap_done ),
    .ap_idle( grp_sha256_transform_fu_99_ap_idle ),
    .ap_ready( grp_sha256_transform_fu_99_ap_ready ),
    .ctx_transform_state_address0( grp_sha256_transform_fu_99_ctx_transform_state_address0 ),
    .ctx_transform_state_ce0( grp_sha256_transform_fu_99_ctx_transform_state_ce0 ),
    .ctx_transform_state_we0( grp_sha256_transform_fu_99_ctx_transform_state_we0 ),
    .ctx_transform_state_d0( grp_sha256_transform_fu_99_ctx_transform_state_d0 ),
    .ctx_transform_state_q0( grp_sha256_transform_fu_99_ctx_transform_state_q0 ),
    .ctx_transform_state_address1( grp_sha256_transform_fu_99_ctx_transform_state_address1 ),
    .ctx_transform_state_ce1( grp_sha256_transform_fu_99_ctx_transform_state_ce1 ),
    .ctx_transform_state_we1( grp_sha256_transform_fu_99_ctx_transform_state_we1 ),
    .ctx_transform_state_d1( grp_sha256_transform_fu_99_ctx_transform_state_d1 ),
    .ctx_transform_state_q1( grp_sha256_transform_fu_99_ctx_transform_state_q1 ),
    .data_transform_address0( grp_sha256_transform_fu_99_data_transform_address0 ),
    .data_transform_ce0( grp_sha256_transform_fu_99_data_transform_ce0 ),
    .data_transform_q0( grp_sha256_transform_fu_99_data_transform_q0 ),
    .data_transform_address1( grp_sha256_transform_fu_99_data_transform_address1 ),
    .data_transform_ce1( grp_sha256_transform_fu_99_data_transform_ce1 ),
    .data_transform_q1( grp_sha256_transform_fu_99_data_transform_q1 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_sha256_transform_fu_99_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_sha256_transform_fu_99_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            grp_sha256_transform_fu_99_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_sha256_transform_fu_99_ap_ready)) begin
            grp_sha256_transform_fu_99_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        ctx_bitlen_load_1_reg_205 <= ctx_bitlen_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        ctx_bitlen_load_reg_195 <= ctx_bitlen_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76 & (ap_const_lv1_0 == tmp_s_fu_140_p2))) begin
        ctx_datalen_1_fu_42 <= ctx_datalen_assign_fu_134_p2;
    end else if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st7_fsm_6 == ap_CS_fsm))) begin
        ctx_datalen_1_fu_42 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_76)) begin
        i_4_reg_186 <= i_4_fu_123_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        i_reg_85 <= i_4_reg_186;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76 & (ap_const_lv1_0 == tmp_s_fu_140_p2))) begin
        i_reg_85 <= i_4_fu_123_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_85 <= ap_const_lv7_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_sha256_transform_fu_99_ap_done))) begin
        tmp_57_reg_201 <= tmp_57_fu_151_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        tmp_58_reg_210 <= tmp_58_fu_156_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        tmp_59_reg_215 <= tmp_59_fu_161_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_76 & ~(exitcond1_fu_117_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~ap_sig_bdd_76 & ~(exitcond1_fu_117_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ctx_bitlen_address0 assign process. ///
always @ (ap_CS_fsm or ctx_bitlen_addr_reg_173 or ctx_bitlen_addr_2_reg_178)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) | (ap_ST_st7_fsm_6 == ap_CS_fsm))) begin
        ctx_bitlen_address0 = ctx_bitlen_addr_2_reg_178;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        ctx_bitlen_address0 = ctx_bitlen_addr_reg_173;
    end else begin
        ctx_bitlen_address0 = ctx_bitlen_addr_2_reg_178;
    end
end

/// ctx_bitlen_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76 or tmp_57_fu_151_p2 or tmp_57_reg_201 or grp_sha256_transform_fu_99_ap_done or tmp_s_fu_140_p2)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76 & ~(ap_const_lv1_0 == tmp_s_fu_140_p2)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_sha256_transform_fu_99_ap_done) & ~(ap_const_lv1_0 == tmp_57_fu_151_p2)) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_57_reg_201)))) begin
        ctx_bitlen_ce0 = ap_const_logic_1;
    end else begin
        ctx_bitlen_ce0 = ap_const_logic_0;
    end
end

/// ctx_bitlen_d0 assign process. ///
always @ (ap_CS_fsm or tmp_58_reg_210 or tmp_59_reg_215)
begin
    if ((ap_ST_st8_fsm_7 == ap_CS_fsm)) begin
        ctx_bitlen_d0 = tmp_59_reg_215;
    end else if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        ctx_bitlen_d0 = tmp_58_reg_210;
    end else begin
        ctx_bitlen_d0 = tmp_59_reg_215;
    end
end

/// ctx_bitlen_we0 assign process. ///
always @ (ap_CS_fsm or tmp_57_reg_201)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) | ((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_57_reg_201)))) begin
        ctx_bitlen_we0 = ap_const_logic_1;
    end else begin
        ctx_bitlen_we0 = ap_const_logic_0;
    end
end

/// ctx_in_data_address0 assign process. ///
always @ (ap_CS_fsm or grp_sha256_transform_fu_99_data_transform_address0 or ctx_datalen_1_cast_fu_129_p1)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        ctx_in_data_address0 = ctx_datalen_1_cast_fu_129_p1;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_in_data_address0 = grp_sha256_transform_fu_99_data_transform_address0;
    end else begin
        ctx_in_data_address0 = ctx_datalen_1_cast_fu_129_p1;
    end
end

/// ctx_in_data_ce0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76 or grp_sha256_transform_fu_99_data_transform_ce0)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76)) begin
        ctx_in_data_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_in_data_ce0 = grp_sha256_transform_fu_99_data_transform_ce0;
    end else begin
        ctx_in_data_ce0 = ap_const_logic_0;
    end
end

/// ctx_in_data_ce1 assign process. ///
always @ (ap_CS_fsm or grp_sha256_transform_fu_99_data_transform_ce1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_in_data_ce1 = grp_sha256_transform_fu_99_data_transform_ce1;
    end else begin
        ctx_in_data_ce1 = ap_const_logic_0;
    end
end

/// ctx_in_data_we0 assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76)) begin
        ctx_in_data_we0 = ap_const_logic_1;
    end else begin
        ctx_in_data_we0 = ap_const_logic_0;
    end
end

/// ctx_state_ce0 assign process. ///
always @ (ap_CS_fsm or grp_sha256_transform_fu_99_ctx_transform_state_ce0)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_state_ce0 = grp_sha256_transform_fu_99_ctx_transform_state_ce0;
    end else begin
        ctx_state_ce0 = ap_const_logic_0;
    end
end

/// ctx_state_ce1 assign process. ///
always @ (ap_CS_fsm or grp_sha256_transform_fu_99_ctx_transform_state_ce1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_state_ce1 = grp_sha256_transform_fu_99_ctx_transform_state_ce1;
    end else begin
        ctx_state_ce1 = ap_const_logic_0;
    end
end

/// ctx_state_we0 assign process. ///
always @ (ap_CS_fsm or grp_sha256_transform_fu_99_ctx_transform_state_we0)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_state_we0 = grp_sha256_transform_fu_99_ctx_transform_state_we0;
    end else begin
        ctx_state_we0 = ap_const_logic_0;
    end
end

/// ctx_state_we1 assign process. ///
always @ (ap_CS_fsm or grp_sha256_transform_fu_99_ctx_transform_state_we1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        ctx_state_we1 = grp_sha256_transform_fu_99_ctx_transform_state_we1;
    end else begin
        ctx_state_we1 = ap_const_logic_0;
    end
end

/// data_read assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76)) begin
        data_read = ap_const_logic_1;
    end else begin
        data_read = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond1_fu_117_p2 or ap_sig_bdd_76 or tmp_57_fu_151_p2 or grp_sha256_transform_fu_99_ap_done or tmp_s_fu_140_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if ((~ap_sig_bdd_76 & ~(exitcond1_fu_117_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76 & (ap_const_lv1_0 == tmp_s_fu_140_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else if (((exitcond1_fu_117_p2 == ap_const_lv1_0) & ~ap_sig_bdd_76 & ~(ap_const_lv1_0 == tmp_s_fu_140_p2))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if ((~(ap_const_logic_0 == grp_sha256_transform_fu_99_ap_done) & (ap_const_lv1_0 == tmp_57_fu_151_p2))) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else if ((~(ap_const_logic_0 == grp_sha256_transform_fu_99_ap_done) & ~(ap_const_lv1_0 == tmp_57_fu_151_p2))) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st2_fsm_1;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign ap_return = ctx_datalen_1_fu_42;

/// ap_sig_bdd_76 assign process. ///
always @ (data_empty_n or exitcond1_fu_117_p2)
begin
    ap_sig_bdd_76 = ((data_empty_n == ap_const_logic_0) & (exitcond1_fu_117_p2 == ap_const_lv1_0));
end
assign ctx_bitlen_addr_2_gep_fu_60_p3 = ap_const_lv32_1;
assign ctx_bitlen_addr_gep_fu_52_p3 = ap_const_lv32_0;
assign ctx_datalen_1_cast_fu_129_p1 = $unsigned(ctx_datalen_1_fu_42);
assign ctx_datalen_assign_fu_134_p2 = (ctx_datalen_1_fu_42 + ap_const_lv7_1);
assign ctx_in_data_address1 = grp_sha256_transform_fu_99_data_transform_address1;
assign ctx_in_data_d0 = data_dout;
assign ctx_state_address0 = grp_sha256_transform_fu_99_ctx_transform_state_address0;
assign ctx_state_address1 = grp_sha256_transform_fu_99_ctx_transform_state_address1;
assign ctx_state_d0 = grp_sha256_transform_fu_99_ctx_transform_state_d0;
assign ctx_state_d1 = grp_sha256_transform_fu_99_ctx_transform_state_d1;
assign exitcond1_fu_117_p2 = (i_reg_85 == ap_const_lv7_40? 1'b1: 1'b0);
assign grp_sha256_transform_fu_99_ap_start = grp_sha256_transform_fu_99_ap_start_ap_start_reg;
assign grp_sha256_transform_fu_99_ctx_transform_state_q0 = ctx_state_q0;
assign grp_sha256_transform_fu_99_ctx_transform_state_q1 = ctx_state_q1;
assign grp_sha256_transform_fu_99_data_transform_q0 = ctx_in_data_q0;
assign grp_sha256_transform_fu_99_data_transform_q1 = ctx_in_data_q1;
assign i_4_fu_123_p2 = (i_reg_85 + ap_const_lv7_1);
assign tmp_57_fu_151_p2 = (ctx_bitlen_load_reg_195 > ap_const_lv32_FFFFFDFF? 1'b1: 1'b0);
assign tmp_58_fu_156_p2 = (ctx_bitlen_load_1_reg_205 + ap_const_lv32_1);
assign tmp_59_fu_161_p2 = (ctx_bitlen_load_reg_195 + ap_const_lv32_200);
assign tmp_s_fu_140_p2 = (ctx_datalen_assign_fu_134_p2 == ap_const_lv7_40? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    ctx_bitlen_addr_reg_173 <= 1'b0;
    ctx_bitlen_addr_2_reg_178 <= 1'b1;
end



endmodule //sha256_update

