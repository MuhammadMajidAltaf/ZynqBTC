/*********************************************************************
* Filename:   main.cpp
* Author:    Steve Grace (sgrace AT xilinx.com)
* Copyright:
* Disclaimer: This code is presented "as is" without any guarantees.
* Details:	This is the test function for the miner implementation.
* 			It tests the code with Genesis Block and Block 125552.
* 			It is also a dummy core, meaning any nonce comparison
* 			will take place on the ARM (200MHz is slower than 600MHz)
*********************************************************************/

/*************************** HEADER FILES ***************************/
#include "miner.h"

/*********************** FUNCTION DEFINITIONS ***********************/
void print_hash(BYTE hash[], size_t len)
{
   int idx;
   for (idx=0; idx < len; idx++)
      printf("%02x",hash[idx]);
   printf("\n");
}

int main() {
		int ret = 0;
		ofstream result; // Result file
		result.open("result.dat");
		if (!result.is_open()) {
			printf("result.dat could not be opened.");
			ret=1;
		} else {
			// DUT
	        BYTE text[5][BLOCK_HEADER] = {
	        		// Block 125552
	        		{0x01,0x00,0x00,0x00,0x81,0xcd,0x02,0xab,0x7e,0x56,0x9e,0x8b,0xcd,0x93,0x17,0xe2,0xfe,0x99,0xf2,
	        		 0xde,0x44,0xd4,0x9a,0xb2,0xb8,0x85,0x1b,0xa4,0xa3,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0xe3,0x20,
	        		 0xb6,0xc2,0xff,0xfc,0x8d,0x75,0x04,0x23,0xdb,0x8b,0x1e,0xb9,0x42,0xae,0x71,0x0e,0x95,0x1e,0xd7,
	        		 0x97,0xf7,0xaf,0xfc,0x88,0x92,0xb0,0xf1,0xfc,0x12,0x2b,0xc7,0xf5,0xd7,0x4d,0xf2,0xb9,0x44,0x1a,
	        		 0x42,0xa1,0x46,0x95}	
					// Genesis Block
	        	   ,{0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	        		 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3B,0xA3,
	        		 0xED,0xFD,0x7A,0x7B,0x12,0xB2,0x7A,0xC7,0x2C,0x3E,0x67,0x76,0x8F,0x61,0x7F,0xC8,0x1B,0xC3,0x88,
	        		 0x8A,0x51,0x32,0x3A,0x9F,0xB8,0xAA,0x4B,0x1E,0x5E,0x4A,0x29,0xAB,0x5F,0x49,0xFF,0xFF,0x00,0x1D,
	        		 0x1D,0xAC,0x2B,0x7C}
					 // Block 1
	        	   ,{0x01,0x00,0x00,0x00,0x6f,0xe2,0x8c,0x0a,0xb6,0xf1,0xb3,0x72,0xc1,0xa6,0xa2,0x46,0xae,0x63,0xf7,
				     0x4f,0x93,0x1e,0x83,0x65,0xe1,0x5a,0x08,0x9c,0x68,0xd6,0x19,0x00,0x00,0x00,0x00,0x00,0x98,0x20,
					 0x51,0xfd,0x1e,0x4b,0xa7,0x44,0xbb,0xbe,0x68,0x0e,0x1f,0xee,0x14,0x67,0x7b,0xa1,0xa3,0xc3,0x54,
					 0x0b,0xf7,0xb1,0xcd,0xb6,0x06,0xe8,0x57,0x23,0x3e,0x0e,0x61,0xbc,0x66,0x49,0xff,0xff,0x00,0x1d,
					 0x01,0xe3,0x62,0x99}
					 // Block 2
				   ,{0x01,0x00,0x00,0x00,0x48,0x60,0xeb,0x18,0xbf,0x1b,0x16,0x20,0xe3,0x7e,0x94,0x90,0xfc,0x8a,0x42,
				     0x75,0x14,0x41,0x6f,0xd7,0x51,0x59,0xab,0x86,0x68,0x8e,0x9a,0x83,0x00,0x00,0x00,0x00,0xd5,0xfd,
					 0xcc,0x54,0x1e,0x25,0xde,0x1c,0x7a,0x5a,0xdd,0xed,0xf2,0x48,0x58,0xb8,0xbb,0x66,0x5c,0x9f,0x36,
					 0xef,0x74,0x4e,0xe4,0x2c,0x31,0x60,0x22,0xc9,0x0f,0x9b,0xb0,0xbc,0x66,0x49,0xff,0xff,0x00,0x1d,
					 0x08,0xd2,0xbd,0x61}
	        		// Block 3
				   ,{0x01,0x00,0x00,0x00,0xbd,0xdd,0x99,0xcc,0xfd,0xa3,0x9d,0xa1,0xb1,0x08,0xce,0x1a,0x5d,0x70,0x03,
				     0x8d,0x0a,0x96,0x7b,0xac,0xb6,0x8b,0x6b,0x63,0x06,0x5f,0x62,0x6a,0x00,0x00,0x00,0x00,0x44,0xf6,
					 0x72,0x22,0x60,0x90,0xd8,0x5d,0xb9,0xa9,0xf2,0xfb,0xfe,0x5f,0x0f,0x96,0x09,0xb3,0x87,0xaf,0x7b,
					 0xe5,0xb7,0xfb,0xb7,0xa1,0x76,0x7c,0x83,0x1c,0x9e,0x99,0x5d,0xbe,0x66,0x49,0xff,0xff,0x00,0x1d,
					 0x05,0xe0,0xed,0x6d}
					 // Block 4
				   //,{0x01,0x00,0x00,0x00,0x49,0x44,0x46,0x95,0x62,0xae,0x1c,0x2c,0x74,0xd9,0xa5,0x35,0xe0,0x0b,0x6f,
				   //  0x3e,0x40,0xff,0xba,0xd4,0xf2,0xfd,0xa3,0x89,0x55,0x01,0xb5,0x82,0x00,0x00,0x00,0x00,0x99,0x9e,
					// 0x1c,0x83,0x7c,0x76,0xa1,0xb7,0xfb,0xb7,0xe5,0x7b,0xaf,0x87,0xb3,0x09,0x96,0x0f,0x5f,0xfe,0xfb,
					// 0xf2,0xa9,0xb9,0x5d,0xd8,0x90,0x60,0x22,0x72,0xf6,0x44,0x8c,0xc1,0x66,0x49,0xff,0xff,0x00,0x1d,
					// 0x2b,0xfe,0xe0,0xa9} 85144a84488ea88d221c8bd6c059da090e88f8a2c99690ee55dbba4e00000000
	        };
	        BYTE buf[SHA256_BLOCK_SIZE];
	        //SHA256_CTX ctx;

			for(int i = 0; i < 5; i++) {
				printf("Test %d = ", i); print_hash(text[i],BLOCK_HEADER);
				miner(text[i], buf);
				printf("Result %d = ",i); print_hash(buf,SHA256_BLOCK_SIZE);

				// Store the data in the appropriate format for comparison
				for(int j = 0; j < SHA256_BLOCK_SIZE; j++) {
					result << hex << setw(2) << setfill('0') << int(buf[j]);
				}
				result << endl;
			}
			result.close();

			// Compare the data above with the results.golden.dat
			int test = system("echo %CD%");
			printf("The value returned was: %d.\n",test);
			ret = system("diff -w result.dat result.golden.dat");
			if ( ret != 0) {
				printf("Test Failed!!!\n");
				ret=1;
			} else {
				printf("Test Passed!!!\n");
			}
		}

        return ret;
}
